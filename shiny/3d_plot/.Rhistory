head(fdata)
fdata <- select(mydata, -c(Manufacturer, Model, Type, AirBags, DriveTrain, Man.trans.avail, Origin, Make))
fdata <- lapply(fdata, as.numeric)
head(fdata)
pr.out = prcomp(fdata, scale=TRUE)
pr.out = prcomp(fdata, scale=TRUE)
names(pr.out)
fdata <- lapply(fdata, as.numeric)
head(fdata)
fdata <- as.numeric(fdata)
colnames(mydata)
fdata <- select(mydata, -c(Manufacturer, Model, Type, AirBags, DriveTrain, Man.trans.avail, Origin, Make))
head(fdata)
fdata <- lapply(fdata, as.numeric)
head(fdata)
fdata <- as.numeric(fdata)
data("cars93")
#In R Studio
install.packages("Rmpi", type="source")
# 2 doSNOW
install.packages("doSNOW")
library(doSNOW)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
r <- foreach(icount(trials), .combine=rbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
library(foreach)
#install.packages("doParallel")
library(doParallel)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
system.time({
r <- foreach(icount(trials), .combine=rbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=rbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
system.time({
r <- foreach(icount(trials), .combine=rbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
# 3 Rmpi
#In R Studio
install.packages("Rmpi", type="source")
# snow
library(snow)
# snow
library(snow)
cl<-makeCluster(2,type=’SOCK’) #Start a socket cluster of 2 R slaves
cl<-makeCluster(2,type="SOCK") #Start a socket cluster of 2 R slaves
#Random number generation, need ’rlecuyer’ package
clusterSetupRNG(cl)
install.packages("rlecuyer")
#Random number generation, need ’rlecuyer’ package
clusterSetupRNG(cl)
# Loading required package: rlecuyer
# [1] "RNGstream"
clusterExport(cl,ls()) #Export everything to each salve
system.time(lapply( 1:nsim, Iteration, n=100))
Iteration <- function( iter=1, n=100 ){
+ x <- rnorm( n, mean=2, sd=2 )
+ eps <- runif( n, -3, 3 )
+ y <- 1 + 2*x + eps
+ fit <- lm( y ~ x )
+ return( cbind( fit$coef, confint( fit ) ) ) }
system.time(lapply( 1:nsim, Iteration, n=100))
nsim <- 10000
system.time(lapply( 1:nsim, Iteration, n=100))
# user system elapsed
# 26.13 0.03 26.35
system.time(parSapply(cl, 1:nsim, Iteration, n=100))
library(doSNOW)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
system.time({
r <- foreach(icount(trials), .combine=rbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
# 4 snow
library(snow)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- seq(1, 10000)
boot_fx <- function(trial) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
r <- coefficients(result1)
res <- rbind(data.frame(), r)
}
system.time({
results <- vapply(trials, boot_fx)
})
system.time({
results <- vapply(trials, boot_fx, FUN.VALUE = "")
})
boot_fx <- function(trial) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
r <- coefficients(result1)
res <- rbind(data.frame(), r)
}
system.time({
results <- parLapply(trials, boot_fx)
})
cl <- makeSOCKcluster(c("localhost", "localhost"))
system.time({
results <- parLapply(cl, trials, boot_fx)
})
trials <- 10000
system.time({
results <- parLapply(cl, trials, boot_fx)
})
cl <- getMPIcluster()
system.time({
results <- parLapply(cl, trials, boot_fx)
})
stopCluster()
stopCluster(cl)
cl <- makeCluster(2,type="MPI")
# 3 Rmpi
#In R Studio
install.packages("Rmpi", type="source")
install.packages("Rmpi", type = "source")
library(Rmpi)
cl <- makeCluster(2,type="MPI")
stopCluster(cl)
cl <- makeSOCKCluster(c("localhost", "localhost"))
# 4 snow
library(snow)
cl <- makeSOCKCluster(c("localhost", "localhost"))
cl <- makeSOCKcluster(c("localhost", "localhost"))
system.time({
results <- parLapply(cl, trials, boot_fx)
})
clusterApply(cl, 1:2, get("+"), 3)
clusterEvalQ(cl, library(boot))
boot_fx <- function(trial) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
r <- coefficients(result1)
res <- rbind(data.frame(), r)
}
system.time({
results <- parLapply(cl, trials, boot_fx)
})
trials <- seq(1:10000)
system.time({
results <- parLapply(cl, trials, boot_fx)
})
results <- parLapply(cl, trials, boot_fx, simplify=TRUE, USE.NAMES = TRUE)
system.time({
results <- parLapply(cl, trials, boot_fx, simplify=TRUE, USE.NAMES = TRUE)
})
cl <- makeCluster(no_cores)
no_cores <- detectCores() -1
cl <- makeCluster(no_cores)
system.time({
results <- parLapply(cl, trials, boot_fx)
})
boot_fx <- function(trial) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
r <- coefficients(result1)
res <- rbind(data.frame(), r)
}
system.time({
results <- parLapply(cl, trials, boot_fx())
})
results <- parLapply(cl, trials, boot_fx
})
system.time({
results <- parLapply(cl, trials, boot_fx
})
system.time({
})
library(foreach)
#install.packages("doParallel")
library(doParallel)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
system.time({
r <- foreach(icount(trials), .combine=rbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})
# 3 Rmpi
#In R Studio
install.packages("Rmpi", type="source")
install.packages("Rmpi", type = "source")
library(Rmpi)
library(Rmpi)
library(snow);
library(abind);
x = as.list(1:16);
y = matrix(1:12,3,4);
fn <-function(x){
z = y+x;
w = abind(x,x);
b = cbind(y,z);
}
cl= makeCluster(c(numProcs=4), type = "MPI")
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
clusterApply(cl, x, fn);
stopCluster(cl)
library(Rmpi)
library(snow);
library(abind);
x = as.list(1:16);
y = matrix(1:12,3,4);
fn <-function(x){
z = y+x;
w = abind(x,x);
b = cbind(y,z);
}
cl= makeCluster(c(numProcs=4), type = "MPI")
no_cores <- detectCores() -1
cl <- makeCluster(no_cores)
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
clusterApply(cl, x, fn);
stopCluster(cl)
system.time({
clusterApply(cl, x, fn);
})
# cl= makeCluster(c(numProcs=4), type = "MPI")
no_cores <- detectCores()
cl <- makeCluster(no_cores)
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
cl
# cl= makeCluster(c(numProcs=4), type = "MPI")
no_cores <- detectCores() -1
cl <- makeCluster(no_cores)
cl
# cl= makeCluster(c(numProcs=4), type = "MPI")
no_cores <- detectCores()
cl <- makeCluster(no_cores)
system.time({
clusterApply(cl, x, fn);
})
clusterApply(cl, x, fn);
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
cl
system.time({
clusterApply(cl, x, fn);
})
# 4 snow
library(snow)
# practice 1
library(abind);
x = as.list(1:16);
y = matrix(1:12,3,4);
fn <-function(x){
z = y+x;
w = abind(x,x);
b = cbind(y,z);
}
# cl= makeCluster(c(numProcs=4), type = "MPI")
no_cores <- detectCores()
cl <- makeCluster(no_cores)
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
cl
system.time({
clusterApply(cl, x, fn);
})
stopCluster(cl)
# cl= makeCluster(c(numProcs=4), type = "MPI")
no_cores <- detectCores() -1
cl <- makeCluster(no_cores)
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
cl
system.time({
clusterApply(cl, x, fn);
})
library(snow)
# practice 1
library(abind);
x = as.list(1:16);
y = matrix(1:12,3,4);
fn <-function(x){
z = y+x;
w = abind(x,x);
b = cbind(y,z);
}
# cl= makeCluster(c(numProcs=4), type = "MPI")
no_cores <- detectCores() -1
cl <- makeCluster(no_cores)
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
cl
system.time({
clusterApply(cl, x, fn);
})
stopCluster(cl)
system.time({
clusterApply(4, x, fn);
})
cl= makeCluster(c(numProcs=4), type = "MPI")
#Explicitly send libraries, functions, and variables before clusterApply()
clusterExport(cl, "y");
clusterEvalQ(cl, library(abind));
cl
cl= makeCluster(c(numProcs=4), type = "MPI")
system.time({
results <- parLapply(cl, trials, boot_fx)
})
# practice 2
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- seq(1:10000)
no_cores <- detectCores() -1
cl <- makeCluster(no_cores)
clusterApply(cl, 1:2, get("+"), 3)
clusterEvalQ(cl, library(boot))
boot_fx <- function(trial) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
r <- coefficients(result1)
res <- rbind(data.frame(), r)
}
system.time({
results <- parLapply(cl, trials, boot_fx)
})
x
trials <- as.list(seq(1:10000))
system.time({
results <- parLapply(cl, trials, boot_fx)
})
library(stats)
library(MASS)
result <- kmeans(Boston, 4, nstart = 100)
result <- lapply(rep(25,4),
result <- lapply(rep(25,4),
result <- lapply(rep(25,4),
result <- lapply(rep(25,4),
function(nstart) kmeans(Boston, 4, nstart = 100)
result <- lapply(rep(25,4),
function(nstart) kmeans(Boston, 4, nstart = 100)
)
result <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart))
i <- sapply(results, function(result) result$tot.withinss)
results <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart))
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
result
numCores <- detectCores()
# with multiple cores
library(parallel)
numCores <- detectCores()
results
results
numCores <- detectCores()
numCores
results <- mclapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart, mc.cores=numCores))
results <- mclapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart, mc.cores=numCores))
results <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart, mc.cores=numCores))
numCores
system.time{
results <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart))
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
}
system.time{
results <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart))
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
}
system.time{
results <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart))
}
results <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart))
results
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
result
# with multiple cores
library(parallel)
numCores <- detectCores()
numCores
starts <- rep(25,4)
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
results <- lapply(starts,fx, mc.cores = numCores)
results <- mclapply(starts,fx, mc.cores = numCores)
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
# answer for question part 2
system.time{
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
}
# answer for question part 2
system.time(
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
)
# answer for question part 2
system.time(
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
results <- mclapply(starts,fx, mc.cores = numCores)
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
)
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
results <- mclapply(starts,fx, mc.cores = numCores)
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
# answer for question part 2
system.time(
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
results <- mclapply(starts,fx, mc.cores = numCores)
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
)
# answer for question part 2
system.time(
results <- mclapply(starts,fx, mc.cores = numCores)
)
starts
fx <- function(nstart) kmeans(Boston, 5, nstart = nstart)
results <- mclapply(starts,fx, mc.cores = numCores)
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
head(result)
# report the results
head(results)
head(result)
# answer for question part 2
system.time(
results <- lapply(starts,fx)
)
# only one core at this moment
library(stats)
library(MASS)
starts <- rep(25,4)
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
results <- mclapply(starts,fx, mc.cores = numCores)
# only one core at this moment
library(stats)
library(MASS)
results <- lapply(rep(25,4),function(nstart) kmeans(Boston, 4, nstart = nstart))
results
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
result
# with multiple cores
library(parallel)
numCores <- detectCores()
numCores
starts <- rep(25,4)
fx <- function(nstart) kmeans(Boston, 4, nstart = nstart)
results <- mclapply(starts,fx, mc.cores = numCores)
i <- sapply(results, function(result) result$tot.withinss)
result <- results[[which.min(i)]]
# answer for question part 2
system.time(
results <- lapply(starts,fx)
)
system.time(
results <- mclapply(starts,fx, mc.cores = numCores)
)
system.file("shinySimple", package = "rgl")
# setwd("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/rgl/shinySimple")
runApp(system.file("shinySimple", package = "rgl"),launch.browser = TRUE)
library(shiny)
# setwd("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/rgl/shinySimple")
runApp(system.file("shinySimple", package = "rgl"),launch.browser = TRUE)
# RGL
library(rgl)
# setwd("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/rgl/shinySimple")
runApp(system.file("shinySimple", package = "rgl"),launch.browser = TRUE)
system.file("shinySimple", package = "rgl")
library(MPV)
data <- table.b4
head(data)
runApp("final/")
library(shiny)
runApp("final/")
setwd("/Users/brucepei/data_550/miniposter/")
setwd("/Users/brucepei/data_550/miniposter/Data_550_final_presentation/")
runApp("final/")
library(shiny)
library(shiny)
runApp("final/")
runApp("final/")
library(shiny)
runApp("final/")
